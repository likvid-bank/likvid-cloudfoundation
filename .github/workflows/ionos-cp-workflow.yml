name: Deploy IONOS Users
on:
  workflow_dispatch:
    inputs:
      buildingBlockRun:
        description: "Building Block Run Object"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: likvid-prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup meshstack auth
        id: setup-meshstack-auth
        uses: meshcloud/actions-register-source@v0.1.0
        with:
          client_id: ${{ vars.BUILDINGBLOCK_API_CLIENT_ID }}
          key_secret: ${{ secrets.BUILDINGBLOCK_API_KEY_SECRET }}
          steps: |
            [
              {
                "id": "create-ionos-user",
                "displayName": "Create Users in IONOS if not exist"
              }
            ]

      - name: IONOS User Creation
        id: create-ionos-user
        env:
          TOKEN_IONOS: ${{ secrets.TOKEN_IONOS }}
          IONOS_FIRST_LOGIN_PW: ${{ secrets.IONOS_FIRST_LOGIN_PW }}
          MESH_USERS: ${{ steps.setup-meshstack-auth.outputs.users }}
        run: |
          #!/bin/bash

          # Enable best practices for error handling and debugging
          set -o errexit  # Exit the script when any command fails
          set -o errtrace # Trace errors in functions
          set -o pipefail # Set the exit status of a pipe to the one that fails
          set -o nounset  # Exit the script when using an undefined variable

          # API credentials
          url="https://api.ionos.com/cloudapi/v6/um/users"

          # Pagination parameters
          limit=100
          offset=0

          # Extract list of user emails from MESH_USERS environment variable
          users_list="$(echo "$MESH_USERS" | jq '.[].email')"

          # Create new users from the MESH_USERS list
           for user in $(echo "$MESH_USERS" | jq -c '.[]'); do
            email="$(echo "$user" | jq -r '.email')"
            firstname="$(echo "$user" | jq -r '.firstName')"
            lastname="$(echo "$user" | jq -r '.lastName')"
            echo "User $email  Creating..."
            password=$IONOS_FIRST_LOGIN_PW

              # Prepare payload for creating the user
              new_user_payload="{\"properties\": {\"firstname\": \"$firstname\", \"lastname\": \"$lastname\", \"email\": \"$email\", \"administrator\": false, \"password\": \"$password\", \"active\": true}}"

              # Make the POST request to create the user
              create_response="$(curl -s -w "%{http_code}" -X POST -H "Authorization: Basic $TOKEN_IONOS" -H "Content-Type: application/json" -d "$new_user_payload" "$url")"
              http_code=$(echo "$create_response" | tail -n 1)
              response_body=$(echo "$create_response" | sed '$d')

              # Output HTTP status code and response body for debugging
              echo "HTTP Status Code: $http_code"
              echo "Response: $response_body"

              # If user creation is successful (HTTP 202), check the activation status
              if [ "$http_code" -eq 202 ]; then
                echo "User $email created successfully, checking activation status..."
                user_id=$(echo "$response_body" | jq -r '.id')
                attempts=0
                max_attempts=5

                # Retry checking user activation status a few times
                while [ $attempts -lt $max_attempts ]; do
                  user_status=$(curl -s -H "Authorization: Basic $TOKEN_IONOS" "$url/$user_id" | jq -r '.properties.active')
                  if [ "$user_status" == "true" ]; then
                    echo "User $email successfully activated."
                    break
                  else
                    echo "User $email is not yet activated, retrying in 10 seconds..."
                    sleep 10
                    attempts=$((attempts + 1))
                  fi
                done

                # If activation fails after max attempts, notify the user
                if [ $attempts -eq $max_attempts ]; then
                  echo "User $email could not be activated, maximum attempts reached."
                fi
              else
                # If user creation fails, output the status code
                echo "Error creating user $email. Status code: $http_code"
              fi
          done

      - name: Send status
        if: ${{ steps.create-ionos-user.outcome == 'success' || steps.create-ionos-user.outcome == 'failure' }}
        uses: meshcloud/actions-send-status@main
        with:
          step_id: "create-ionos-user"
          status: ${{ steps.create-ionos-user.outcome == 'success' && 'SUCCEEDED' || 'FAILED' }}
          summary: "create user in ionos if needed"
          user_message: ${{ steps.create-ionos-user.outcome == 'success' && 'Step was successful.' || 'Step was failed' }}
          system_message:  ${{ steps.create-ionos-user.outcome == 'success' && 'Step was successful.' || 'Step Failed, please check the GitHub actions log for more details.' }}

      - name: Send final status
        if: ${{ always() }}
        uses: meshcloud/actions-send-status@main
        with:
          final_status: ${{ job.status == 'success' && 'SUCCEEDED' || 'FAILED' }}
          summary: ${{ job.status == 'success' && 'User Deployment successful' || 'User Deployment failed' }}
